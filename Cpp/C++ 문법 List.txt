C++ 문법 List
1. 삼항 연산자
x = ( 조건 ) ? 참 : 거짓;
	ㄴ if-else 두 개의 케이스 + 단순 계산 일때 사용
-----------------------------------------------------------------------
2. for문의 간략화
for(int& each : arr)
{
	cin >> each;
}
-----------------------------------------------------------------------
3. vector 라이브러리 내장함수

3-1) push_back
arr.push_back(10);
	ㄴ 10을 arr의 맨 뒤에 추가
	ㄴ 기존에 arr의 크기가 5였다면 6으로 늘리고 그 6의 자리에 10을 추가

3-2) begin()
arr.begin()
	ㄴ 리턴값은 arr의 첫 번째 요소의 주소값
	ㄴ 해당 주소값에 있는 실제 데이터를 가져오려면 *arr.begin() 또는 arr.front() 을 쓰면 됨

3-3) end()
arr.end()
	ㄴ 리턴값은 arr의 마지막 요소 다음 위치의 주소값
	ㄴ arr 배열의 마지막 요소의 실제 데이터를 가져올려면 *(arr.end() - 1) 또는 arr.back() 을 해야함

3-4) erase()
arr.erase(arr.begin()+3)
	ㄴ arr 배열의 3번 인덱스 요소를 제거

3-5) 2차원 vector
vector<vector<int>> arr(row, vector<int>(col, 0));
	ㄴ row와 col을 직접 입력받은 크기만큼 만들고 0으로 초기화	
-----------------------------------------------------------------------
4. deque 라이브러리 내장함수
	ㄴ 양쪽 끝에서의 삽입과 삭제에 더욱 효율적

4-1)
arr.front()
	ㄴ 리턴값은 arr의 첫 번째 요소의 값

4-2)
arr.back()
	ㄴ 리턴값은 arr의 마지막 요소의 값

4-3)
arr.push_front(10)
	ㄴ 10을 arr 배열 맨 첫 번째 요소의 값으로 넣음

4-4)
arr.push_back(10)
	ㄴ 10을 arr 배열 맨 마지막 요소의 값으로 넣음

4-5)
arr.pop_front()
	ㄴ arr 배열의 맨 첫 번째 요소를 삭제

4-6)
arr.pop_back()
	ㄴ arr 배열의 맨 마지막 요소를 삭제
-----------------------------------------------------------------------
5. unordered_map 라이브러리 내장함수
	ㄴ unordered_map<string, int> arr;
	ㄴ key-value 해시맵
5-1)
arr["key"] = 1
	ㄴ key(str)-value(int)

5-2)
arr["key"]++
	ㄴ key의 value에 +1

5-3)
if(arr["key"] != 0)
	ㄴ key값이 arr에 존재할때

5-4)
arr.size()
	ㄴ arr의 크기

5-5)
arr.erase("key")
	ㄴ 해당 key-value 삭제

5-6)
unordered_map<string, bool> visited;
string key = to_string(i) + "," + to_string(j);
visited[key] = false
-----------------------------------------------------------------------
6. 나눗셈의 결과를 반올림하고싶을때
	ㄴ <cmath> 라이브러리 사용
	ㄴ double 사용
	ㄴ result = round(static_cast<double>(x) / y);
-----------------------------------------------------------------------
7. string 한 줄 전체를 vector에 넣고 싶을때( 공백 포함 )
	ㄴ getline(cin, line)
		ㄴ line을 입력받겠다
	ㄴ arr.push_back(line)
		ㄴ 입력받은 line을 arr에 push_back 하여 삽입
-----------------------------------------------------------------------
8. stack 라이브러리 내장함수

8-1)
arr.push(변수)
	ㄴ 최상단에 요소 추가

8-2)
arr.pop()
	ㄴ 최상단 요소 제거

8-3)
arr.top()
	ㄴ 최상단 요소 가져옴

8-4)
arr.empty()
	ㄴ 스택이 비어있는지 확인

8-5)
2차원 좌표를 넣는 법
stack<pair<int, int>> arr;
stack.push(make_pair(x, y));

8-6)
2차원 좌표를 꺼내는 법
pair<int, int> coord = stack.front();
coord.first, coord.second
-----------------------------------------------------------------------
9. set 라이브러리
	ㄴ 배열에 중복된 수를 제거하기 위해 사용
	ㄴ set<int> unique(arr.begin(), arr.end());
-----------------------------------------------------------------------
10. struct 구조체
	ㄴ // class처럼 도면
struct Num
{
    int num_0 = 0;
    int num_1 = 0;

    // 생성자 - 객체가 생성될 때, 호출
    Num() : num_0(0), num_1(0) {}
    Num(int a, int b) : num_0(a), num_1(b) {}

    void print()
    {
        cout << num_0 << endl;
        cout << num_1 << endl;
    }
};
int main()
{
    // 각 객체
    Num temp; // 0, 0
    Num temp2(1, 5); // 1, 5

    temp.print();
    temp2.print();

    return 0;
}
-----------------------------------------------------------------
11. 나머지 연산 규칙
	ㄴ a % 17 = (b % 17 + c % 17) % 17
------------------------------------------------------------------
12. DP 접근 방식
	ㄴ 1. n 번 째에 도달을 어떻게 할 건가
	ㄴ 2. 점화식을 세우기
------------------------------------------------------------------
13. 입력 받은 문자열을 각각 하나마다 배열에 넣고싶을때
string str;
vector<char> arr;
for(char c : str)
{
	arr.push_back(c);
}